{"version":3,"sources":["../index.js"],"names":["SELECTION_START_AT","TableDragSelect","propTypes","value","error","Error","Array","isArray","props","length","columnCount","row","cell","onChange","func","children","trs","Children","toArray","rowCount","tr","tds","type","td","classNameCellBeingSelected","string","classNameCellSelected","state","selectionStarted","startRow","startColumn","endRow","endColumn","addMode","touchStartCoordinates","componentDidMount","window","addEventListener","handleTouchEndWindow","componentWillUnmount","removeEventListener","render","renderRows","map","i","j","handleTouchStartCell","handleTouchMoveCell","isCellBeingSelected","isLeftClick","e","button","isTouch","clientX","clientY","touchX","touchY","startSelection","Math","abs","eventToCellLocation","column","setState","preventDefault","minRow","min","maxRow","max","minColumn","maxColumn","Component","defaultProps","Cell","shouldComponentUpdate","beingSelected","nextProps","selected","handleTouchStart","passive","handleTouchMove","className","classNameBeingSelected","classNameSelected","disabled","onTouchStart","onTouchMove","target","touches","touch","document","elementFromPoint","tagName","parentNode","rowIndex","cellIndex"],"mappings":"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","file":"index.js","sourcesContent":["import React from \"react\";\nimport equal from \"deep-is\";\nimport clone from \"clone\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Minimum amount of px for selection to start\n *\n * @type {number}\n */\nconst SELECTION_START_AT = 20;\n\nexport default class TableDragSelect extends React.Component {\n  propTypes = {\n    value: props => {\n      const error = new Error(\n        \"Invalid prop `value` supplied to `TableDragSelect`. Validation failed.\"\n      );\n      if (!Array.isArray(props.value)) {\n        return error;\n      }\n      if (props.value.length === 0) {\n        return;\n      }\n      const columnCount = props.value[0].length;\n      for (const row of props.value) {\n        if (!Array.isArray(row) || row.length !== columnCount) {\n          return error;\n        }\n        for (const cell of row) {\n          if (typeof cell !== \"boolean\") {\n            return error;\n          }\n        }\n      }\n    },\n    onChange: PropTypes.func,\n    children: props => {\n      if (TableDragSelect.propTypes.value(props)) {\n        return; // Let error be handled elsewhere\n      }\n      const error = new Error(\n        \"Invalid prop `children` supplied to `TableDragSelect`. Validation failed.\"\n      );\n      const trs = React.Children.toArray(props.children);\n      const rowCount = props.value.length;\n      const columnCount = props.value.length === 0 ? 0 : props.value[0].length;\n      if (trs.length !== rowCount) {\n        return error;\n      }\n      for (const tr of trs) {\n        const tds = React.Children.toArray(tr.props.children);\n        if (tr.type !== \"tr\" || tds.length !== columnCount) {\n          return error;\n        }\n        for (const td of tds) {\n          if (td.type !== \"td\") {\n            return error;\n          }\n        }\n      }\n    },\n    classNameCellBeingSelected:PropTypes.string,\n    classNameCellSelected:PropTypes.string\n  };\n\n  static defaultProps = {\n    value: [],\n    onChange: () => {},\n    classNameCellBeingSelected:'cell-being-selected',\n    classNameCellSelected:'cell-selected'\n  };\n\n  state = {\n    selectionStarted: false,\n    startRow: null,\n    startColumn: null,\n    endRow: null,\n    endColumn: null,\n    addMode: null\n  };\n\n  touchStartCoordinates = null;\n\n  componentDidMount = () => {\n    window.addEventListener(\"mouseup\", this.handleTouchEndWindow);\n    window.addEventListener(\"touchend\", this.handleTouchEndWindow);\n  };\n\n  componentWillUnmount = () => {\n    window.removeEventListener(\"mouseup\", this.handleTouchEndWindow);\n    window.removeEventListener(\"touchend\", this.handleTouchEndWindow);\n  };\n\n  render = () => {\n    const { value, onChange, ...props } = this.props;\n    return (\n      <table className=\"table-drag-select\" {...props}>\n        <tbody>{this.renderRows()}</tbody>\n      </table>\n    );\n  };\n\n  renderRows = () =>{\n    const {classNameCellBeingSelected, classNameCellSelected}=this.props;\n\n    return React.Children.map(this.props.children, (tr, i) => {\n      return (\n        <tr key={i} {...tr.props}>\n          {React.Children.map(tr.props.children, (cell, j) => (\n            <Cell\n              classNameBeingSelected={classNameCellBeingSelected}\n              classNameSelected={classNameCellSelected}\n              key={j}\n              onTouchStart={this.handleTouchStartCell}\n              onTouchMove={this.handleTouchMoveCell}\n              selected={this.props.value[i][j]}\n              beingSelected={this.isCellBeingSelected(i, j)}\n              {...cell.props}\n            >\n              {cell.props.children}\n            </Cell>\n          ))}\n        </tr>\n      );\n    });\n  }\n\n  handleTouchStartCell = e => {\n    const isLeftClick = e.button === 0;\n    const isTouch = e.type !== \"mousedown\";\n\n    this.touchStartCoordinates = [e.clientX, e.clientY];\n  };\n\n  handleTouchMoveCell = e => {\n    if (this.touchStartCoordinates === null) {\n      return;\n    }\n\n    const { selectionStarted } = this.state;\n    const [touchX, touchY] = this.touchStartCoordinates;\n\n    const startSelection =\n      Math.abs(e.clientX - touchX) >= SELECTION_START_AT ||\n      Math.abs(e.clientY - touchY) >= SELECTION_START_AT;\n\n    const { row, column } = eventToCellLocation(e);\n\n    if (!selectionStarted && startSelection) {\n      this.setState({\n        selectionStarted: true,\n        startRow: row,\n        startColumn: column,\n        endRow: row,\n        endColumn: column,\n        addMode: !this.props.value[row][column]\n      });\n    }\n\n    if (selectionStarted) {\n      e.preventDefault();\n\n      if (!startSelection) {\n        this.setState({ selectionStarted: false });\n      }\n\n      this.setState({\n        endRow: row,\n        endColumn: column\n      });\n    }\n  };\n\n  handleTouchEndWindow = e => {\n    const isLeftClick = e.button === 0;\n    const isTouch = e.type !== \"mousedown\";\n\n    if (this.state.selectionStarted && (isLeftClick || isTouch)) {\n      const value = clone(this.props.value);\n      const minRow = Math.min(this.state.startRow, this.state.endRow);\n      const maxRow = Math.max(this.state.startRow, this.state.endRow);\n      for (let row = minRow; row <= maxRow; row++) {\n        const minColumn = Math.min(\n          this.state.startColumn,\n          this.state.endColumn\n        );\n        const maxColumn = Math.max(\n          this.state.startColumn,\n          this.state.endColumn\n        );\n        for (let column = minColumn; column <= maxColumn; column++) {\n          value[row][column] = this.state.addMode;\n        }\n      }\n      this.setState({ selectionStarted: false });\n      this.props.onChange(value);\n    }\n\n    this.touchStartCoordinates = null;\n  };\n\n  isCellBeingSelected = (row, column) => {\n    const minRow = Math.min(this.state.startRow, this.state.endRow);\n    const maxRow = Math.max(this.state.startRow, this.state.endRow);\n    const minColumn = Math.min(this.state.startColumn, this.state.endColumn);\n    const maxColumn = Math.max(this.state.startColumn, this.state.endColumn);\n    return (\n      this.state.selectionStarted &&\n      (row >= minRow &&\n        row <= maxRow &&\n        column >= minColumn &&\n        column <= maxColumn)\n    );\n  };\n}\n\nclass Cell extends React.Component {\n  // This optimization gave a 10% performance boost while drag-selecting\n  // cells\n  shouldComponentUpdate = nextProps =>\n    this.props.beingSelected !== nextProps.beingSelected ||\n    this.props.selected !== nextProps.selected;\n\n  componentDidMount = () => {\n    // We need to call addEventListener ourselves so that we can pass\n    // {passive: false}\n    this.td.addEventListener(\"touchstart\", this.handleTouchStart, {\n      passive: false\n    });\n    this.td.addEventListener(\"touchmove\", this.handleTouchMove, {\n      passive: false\n    });\n  };\n\n  componentWillUnmount = () => {\n    this.td.removeEventListener(\"touchstart\", this.handleTouchStart);\n    this.td.removeEventListener(\"touchmove\", this.handleTouchMove);\n  };\n\n  render = () => {\n    let {\n      className,\n      classNameBeingSelected,\n      classNameSelected,\n      disabled,\n      beingSelected,\n      selected,\n      onTouchStart,\n      onTouchMove,\n      ...props\n    } = this.props;\n\n    if (disabled) {\n      className += \" cell-disabled\";\n    } else {\n      className += \" cell-enabled\";\n      if (selected) {\n        className += ` ${classNameSelected}`;\n      }\n      if (beingSelected) {\n        className += ` ${classNameBeingSelected}`;\n      }\n    }\n    return (\n      <td\n        ref={td => (this.td = td)}\n        className={className}\n        onMouseDown={this.handleTouchStart}\n        onMouseMove={this.handleTouchMove}\n        {...props}\n      >\n        {this.props.children || <span>&nbsp;</span>}\n      </td>\n    );\n  };\n\n  handleTouchStart = e => {\n    if (!this.props.disabled) {\n      this.props.onTouchStart(e);\n    }\n  };\n\n  handleTouchMove = e => {\n    if (!this.props.disabled) {\n      this.props.onTouchMove(e);\n    }\n  };\n}\n\n// Takes a mouse or touch event and returns the corresponding row and cell.\n// Example:\n//\n// eventToCellLocation(event);\n// {row: 2, column: 3}\nconst eventToCellLocation = e => {\n  let target;\n  // For touchmove and touchend events, e.target and e.touches[n].target are\n  // wrong, so we have to rely on elementFromPoint(). For mouse clicks, we have\n  // to use e.target.\n  if (e.touches) {\n    const touch = e.touches[0];\n    target = document.elementFromPoint(touch.clientX, touch.clientY);\n  } else {\n    target = e.target;\n    while (target.tagName !== \"TD\") {\n      target = target.parentNode;\n    }\n  }\n  return {\n    row: target.parentNode.rowIndex,\n    column: target.cellIndex\n  };\n};\n"]}